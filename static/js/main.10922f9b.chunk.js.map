{"version":3,"sources":["components/LoadingSpinner.js","components/Model.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","color","marginLeft","spacing","marginTop","flexDirection","alignItems","LoadingSpinner","props","classes","className","CircularProgress","size","thickness","margin","input","result","maxWidth","textAlign","boxShadow","padding","fontWeight","backgroundColor","marginBottom","borderRadius","transition","Model","useState","img","setImg","model","setModel","labels","setLabels","loading","setLoading","imageRef","useRef","resultRef","loadModel","a","savedModel","localStorage","getItem","savedLabels","tf","labels_json","JSON","parse","console","log","MODEL_URL","fetch","response","json","setItem","save","stringify","useEffect","batched","fromPixels","current","resizeBilinear","div","expandDims","toFloat","results","predict","scores","arraySync","dispose","finalScores","map","score","i","label","sort","b","innerHTML","style","accept","id","type","onChange","e","target","files","length","reader","FileReader","addEventListener","readAsDataURL","htmlFor","Button","variant","component","src","alt","ref","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10922f9b.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        color: '#3F51B5',\n        '& > * + *': {\n        marginLeft: theme.spacing(2),\n        },\n        marginTop: '150px',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}));\n\nconst LoadingSpinner = props => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <CircularProgress color=\"inherit\" size={props.size} thickness={props.thickness} />\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React, { useState, useEffect, useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst MODEL_URL = process.env.PUBLIC_URL + '/kavilres23/';\nconst LABELS_URL = MODEL_URL + 'labels.json';\nconst MODEL_JSON = MODEL_URL + 'model.json';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: 'none',\n    },\n    result: {\n        maxWidth: '400px',\n        textAlign: 'center',\n        boxShadow: '1px 1px 2px 1px rgba(0,0,0,.15)',\n        margin: '20px',\n        padding: '10px',\n        color: '#FFFFFF',\n        fontWeight: '500',\n        backgroundColor: '#3F51BF',\n        marginBottom: '50px',\n        borderRadius: '5px',\n        transition: 'all .2s ease-in-out',\n    }\n}));\n\nconst Model = () => {\n    const classes = useStyles();\n    const [img, setImg] = useState();\n    const [model, setModel] = useState();\n    const [labels, setLabels] = useState();\n    const [loading, setLoading] = useState(false);\n    const imageRef = useRef();\n    const resultRef = useRef();\n\n    const loadModel = async () => {\n        setLoading(true);\n        const savedModel = localStorage.getItem('kavilres23');\n        const savedLabels = localStorage.getItem('kavilres23_labels');\n        if (savedModel && savedLabels) {\n            const model = await tf.loadLayersModel('indexeddb://kavilres23'); \n            let labels_json = JSON.parse(savedLabels);\n            setModel(model);\n            setLabels(labels_json)\n            console.log(\"Saved Resnet Model Found\")\n        } else {\n            // Loading Model for first time\n            const model = await tf.loadLayersModel(MODEL_JSON);\n            setModel(model);\n            const response = await fetch(LABELS_URL);\n            let labels_json = await response.json();\n            setLabels(labels_json)\n            localStorage.setItem('kavilres23', true);\n            model.save('indexeddb://kavilres23')\n            localStorage.setItem('kavilres23_labels', JSON.stringify(labels_json));\n        }\n        setLoading(false);\n    }\n\n    const onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n            const reader = new FileReader();\n            reader.addEventListener(\"load\", () => {\n                setImg(reader.result);\n            });\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    };\n\n    useEffect(() => {\n        if (model && labels && img && imageRef) {\n            const batched = tf.tidy(() => {\n                const img = tf.browser.fromPixels(imageRef.current);\n                const small = tf.image.resizeBilinear(img, [224, 224]).div(255);\n                \n                // Reshape to a single-element batch so we can pass it to executeAsync.\n                return small.expandDims(0).toFloat();\n            });\n            \n            const results = model.predict(batched)\n            const scores = results.arraySync()[0];\n            console.log(scores)\n            results.dispose();\n            batched.dispose();\n        \n            const finalScores = scores.map((score, i) => ({\n                label: labels[i],\n                score: score\n            }));\n                \n            finalScores.sort((a, b) => b.score - a.score);\n            resultRef.current.innerHTML = `<div>${finalScores[0].label} : ${finalScores[0].score} </div><div>${finalScores[1].label} : ${finalScores[1].score}</div>`\n        }\n    }, [model, labels, img, imageRef, resultRef])\n\n    return (    \n        <div>\n            {model && labels ? (\n                <div>\n                    <div style={{ margin: '30px', marginTop: '100px', textAlign: 'center' }}>\n                        <input\n                            accept=\"image/*\"\n                            className={classes.input}\n                            id=\"outlined-button-file\"\n                            type=\"file\"\n                            onChange={onSelectFile}\n                        />\n                        <label htmlFor=\"outlined-button-file\">\n                            <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                                <PhotoCamera /> &nbsp; CHOOSE IMAGE\n                            </Button>\n                        </label> \n                    </div>                                  \n                    {img && (\n                        <div style={{ textAlign: 'center' }}>\n                            <img src={img} style={{ maxWidth: \"90%\" }} alt=\"selected\" ref={imageRef} />\n                            <div style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                            }}>\n                                <div className={classes.result} ref={resultRef} />\n                            </div>\n                        </div>\n                    )} \n                </div>         \n            ) : (\n                <div>\n                    {loading ? (\n                        <LoadingSpinner size={100} thickness={4} />\n                    ) : (\n                        <div style={{ margin: '30px', marginTop: '100px ', textAlign: 'center' }}>\n                            <Button variant=\"contained\" color=\"primary\" component=\"span\" onClick={loadModel}>\n                                LOAD MODEL\n                            </Button>\n                        </div>   \n                    )}\n                </div>\n            )}    \n        </div>\n    )\n}\n\nexport default Model;","import React from 'react';\nimport Model from './components/Model';\n\nconst App = () => {\n  return (\n    <Model />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}