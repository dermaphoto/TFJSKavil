{"version":3,"sources":["components/LoadingSpinner.js","components/Model.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","color","marginLeft","spacing","marginTop","flexDirection","alignItems","LoadingSpinner","props","classes","className","CircularProgress","size","thickness","margin","input","result","maxWidth","textAlign","boxShadow","padding","fontWeight","backgroundColor","marginBottom","borderRadius","transition","Model","useState","img","setImg","model","setModel","labels","setLabels","loading","setLoading","imageRef","useRef","resultRef","loadModel","a","savedModel","localStorage","getItem","savedLabels","tf","labels_json","JSON","parse","console","log","MODEL_URL","fetch","response","json","setItem","save","stringify","useEffect","batched","fromPixels","current","resizeBilinear","div","expandDims","toFloat","results","predict","scores","arraySync","dispose","finalScores","map","score","i","label","String","Number","substring","sort","b","innerHTML","style","accept","id","type","onChange","e","target","files","length","reader","FileReader","addEventListener","readAsDataURL","htmlFor","Button","variant","component","src","alt","ref","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kaAIMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,OACTC,MAAO,UACP,YAAa,CACbC,WAAYJ,EAAMK,QAAQ,IAE1BC,UAAW,QACXC,cAAe,SACfC,WAAY,cAcLC,EAVQ,SAAAC,GACnB,IAAMC,EAAUb,IAEhB,OACI,yBAAKc,UAAWD,EAAQV,MACpB,kBAACY,EAAA,EAAD,CAAkBV,MAAM,UAAUW,KAAMJ,EAAMI,KAAMC,UAAWL,EAAMK,cCX3EjB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACF,QAAS,CACLe,OAAQhB,EAAMK,QAAQ,KAG9BY,MAAO,CACHf,QAAS,QAEbgB,OAAQ,CACJC,SAAU,QACVC,UAAW,SACXC,UAAW,kCACXL,OAAQ,OACRM,QAAS,OACTnB,MAAO,UACPoB,WAAY,MACZC,gBAAiB,UACjBC,aAAc,OACdC,aAAc,MACdC,WAAY,2BAwHLC,EApHD,WACV,IAAMjB,EAAUb,IADA,EAEM+B,qBAFN,mBAETC,EAFS,KAEJC,EAFI,OAGUF,qBAHV,mBAGTG,EAHS,KAGFC,EAHE,OAIYJ,qBAJZ,mBAITK,EAJS,KAIDC,EAJC,OAKcN,oBAAS,GALvB,mBAKTO,EALS,KAKAC,EALA,KAMVC,EAAWC,mBACXC,EAAYD,mBAEZE,EAAS,uCAAG,wCAAAC,EAAA,yDACdL,GAAW,GACLM,EAAaC,aAAaC,QAAQ,cAClCC,EAAcF,aAAaC,QAAQ,sBACrCF,IAAcG,EAJJ,iCAKUC,IAAmB,0BAL7B,OAKJf,EALI,OAMNgB,EAAcC,KAAKC,MAAMJ,GAC7Bb,EAASD,GACTG,EAAUa,GACVG,QAAQC,IAAI,4BATF,yCAYUL,IA/CbM,oCAmCG,eAYJrB,EAZI,OAaVC,EAASD,GAbC,UAcasB,MAlDhBD,qCAoCG,eAcJE,EAdI,iBAecA,EAASC,OAfvB,QAeNR,EAfM,OAgBVb,EAAUa,GACVJ,aAAaa,QAAQ,cAAc,GACnCzB,EAAM0B,KAAK,0BACXd,aAAaa,QAAQ,oBAAqBR,KAAKU,UAAUX,IAnB/C,QAqBdX,GAAW,GArBG,4CAAH,qDA2Df,OAzBAuB,qBAAU,WACN,GAAI5B,GAASE,GAAUJ,GAAOQ,EAAU,CACpC,IAAMuB,EAAUd,KAAQ,WACpB,IAAMjB,EAAMiB,IAAWe,WAAWxB,EAASyB,SAI3C,OAHchB,IAASiB,eAAelC,EAAK,CAAC,IAAK,MAAMmC,IAAI,KAG9CC,WAAW,GAAGC,aAGzBC,EAAUpC,EAAMqC,QAAQR,GACxBS,EAASF,EAAQG,YAAY,GACnCH,EAAQI,UACRX,EAAQW,UAER,IAAMC,EAAcH,EAAOI,KAAI,SAACC,EAAOC,GAAR,MAAe,CAC1CC,MAAO3C,EAAO0C,GACdD,MAAOG,OAAqB,IAAdC,OAAOJ,IAAYK,UAAU,EAAE,OAGjDP,EAAYQ,MAAK,SAACvC,EAAGwC,GAAJ,OAAUA,EAAEP,MAAQjC,EAAEiC,SACvCnC,EAAUuB,QAAQoB,UAAlB,eAAsCV,EAAY,GAAGI,MAArD,cAAgEJ,EAAY,GAAGE,MAA/E,wBAAoGF,EAAY,GAAGI,MAAnH,cAA8HJ,EAAY,GAAGE,MAA7I,cAEL,CAAC3C,EAAOE,EAAQJ,EAAKQ,EAAUE,IAG9B,6BACKR,GAASE,EACN,6BACI,yBAAKkD,MAAO,CAAEpE,OAAQ,OAAQV,UAAW,QAASc,UAAW,WACzD,2BACIiE,OAAO,UACPzE,UAAWD,EAAQM,MACnBqE,GAAG,uBACHC,KAAK,OACLC,SA7CH,SAAAC,GACjB,GAAIA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAMC,OAAS,EAAG,CAC7C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,WAC5BhE,EAAO8D,EAAO3E,WAElB2E,EAAOG,cAAcP,EAAEC,OAAOC,MAAM,QAyCxB,2BAAOM,QAAQ,wBACX,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYhG,MAAM,UAAUiG,UAAU,QAClD,kBAAC,IAAD,MADJ,wBAKPtE,GACG,yBAAKsD,MAAO,CAAEhE,UAAW,WACrB,yBAAKiF,IAAKvE,EAAKsD,MAAO,CAAEjE,SAAU,OAASmF,IAAI,WAAWC,IAAKjE,IAC/D,yBAAK8C,MAAO,CACRlF,QAAS,OACTK,cAAe,SACfC,WAAY,WAEZ,yBAAKI,UAAWD,EAAQO,OAAQqF,IAAK/D,OAMrD,6BACKJ,EACG,kBAAC,EAAD,CAAgBtB,KAAM,IAAKC,UAAW,IAEtC,yBAAKqE,MAAO,CAAEpE,OAAQ,OAAQV,UAAW,SAAUc,UAAW,WAC1D,kBAAC8E,EAAA,EAAD,CAAQC,QAAQ,YAAYhG,MAAM,UAAUiG,UAAU,OAAOI,QAAS/D,GAAtE,kBCnIbgE,EANH,WACV,OACE,kBAAC,EAAD,OCAJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.504d828e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        color: '#3F51B5',\r\n        '& > * + *': {\r\n        marginLeft: theme.spacing(2),\r\n        },\r\n        marginTop: '150px',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nconst LoadingSpinner = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress color=\"inherit\" size={props.size} thickness={props.thickness} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingSpinner;","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nconst MODEL_URL = process.env.PUBLIC_URL + '/kavilres23/';\r\nconst LABELS_URL = MODEL_URL + 'labels.json';\r\nconst MODEL_JSON = MODEL_URL + 'model.json';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n    result: {\r\n        maxWidth: '400px',\r\n        textAlign: 'center',\r\n        boxShadow: '1px 1px 2px 1px rgba(0,0,0,.15)',\r\n        margin: '20px',\r\n        padding: '10px',\r\n        color: '#FFFFFF',\r\n        fontWeight: '500',\r\n        backgroundColor: '#3F51BF',\r\n        marginBottom: '50px',\r\n        borderRadius: '5px',\r\n        transition: 'all .2s ease-in-out',\r\n    }\r\n}));\r\n\r\nconst Model = () => {\r\n    const classes = useStyles();\r\n    const [img, setImg] = useState();\r\n    const [model, setModel] = useState();\r\n    const [labels, setLabels] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const imageRef = useRef();\r\n    const resultRef = useRef();\r\n\r\n    const loadModel = async () => {\r\n        setLoading(true);\r\n        const savedModel = localStorage.getItem('kavilres23');\r\n        const savedLabels = localStorage.getItem('kavilres23_labels');\r\n        if (savedModel && savedLabels) {\r\n            const model = await tf.loadLayersModel('indexeddb://kavilres23'); \r\n            let labels_json = JSON.parse(savedLabels);\r\n            setModel(model);\r\n            setLabels(labels_json)\r\n            console.log(\"Saved Resnet Model Found\")\r\n        } else {\r\n            // Loading Model for first time\r\n            const model = await tf.loadLayersModel(MODEL_JSON);\r\n            setModel(model);\r\n            const response = await fetch(LABELS_URL);\r\n            let labels_json = await response.json();\r\n            setLabels(labels_json)\r\n            localStorage.setItem('kavilres23', true);\r\n            model.save('indexeddb://kavilres23')\r\n            localStorage.setItem('kavilres23_labels', JSON.stringify(labels_json));\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener(\"load\", () => {\r\n                setImg(reader.result);\r\n            });\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (model && labels && img && imageRef) {\r\n            const batched = tf.tidy(() => {\r\n                const img = tf.browser.fromPixels(imageRef.current);\r\n                const small = tf.image.resizeBilinear(img, [224, 224]).div(255);\r\n                \r\n                // Reshape to a single-element batch so we can pass it to executeAsync.\r\n                return small.expandDims(0).toFloat();\r\n            });\r\n            \r\n            const results = model.predict(batched)\r\n            const scores = results.arraySync()[0];\r\n            results.dispose();\r\n            batched.dispose();\r\n\r\n            const finalScores = scores.map((score, i) => ({\r\n                label: labels[i],\r\n                score: String(Number(score)*100).substring(0,5)\r\n            }));\r\n                \r\n            finalScores.sort((a, b) => b.score - a.score);\r\n            resultRef.current.innerHTML = `<div>${finalScores[0].label} : ${finalScores[0].score}% </div><div>${finalScores[1].label} : ${finalScores[1].score}%</div>`\r\n        }\r\n    }, [model, labels, img, imageRef, resultRef])\r\n\r\n    return (    \r\n        <div>\r\n            {model && labels ? (\r\n                <div>\r\n                    <div style={{ margin: '30px', marginTop: '100px', textAlign: 'center' }}>\r\n                        <input\r\n                            accept=\"image/*\"\r\n                            className={classes.input}\r\n                            id=\"outlined-button-file\"\r\n                            type=\"file\"\r\n                            onChange={onSelectFile}\r\n                        />\r\n                        <label htmlFor=\"outlined-button-file\">\r\n                            <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                <PhotoCamera /> &nbsp; CHOOSE IMAGE\r\n                            </Button>\r\n                        </label> \r\n                    </div>                                  \r\n                    {img && (\r\n                        <div style={{ textAlign: 'center' }}>\r\n                            <img src={img} style={{ maxWidth: \"90%\" }} alt=\"selected\" ref={imageRef} />\r\n                            <div style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignItems: 'center',\r\n                            }}>\r\n                                <div className={classes.result} ref={resultRef} />\r\n                            </div>\r\n                        </div>\r\n                    )} \r\n                </div>         \r\n            ) : (\r\n                <div>\r\n                    {loading ? (\r\n                        <LoadingSpinner size={100} thickness={4} />\r\n                    ) : (\r\n                        <div style={{ margin: '30px', marginTop: '100px ', textAlign: 'center' }}>\r\n                            <Button variant=\"contained\" color=\"primary\" component=\"span\" onClick={loadModel}>\r\n                                LOAD MODEL\r\n                            </Button>\r\n                        </div>   \r\n                    )}\r\n                </div>\r\n            )}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model;","import React from 'react';\r\nimport Model from './components/Model';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Model />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}